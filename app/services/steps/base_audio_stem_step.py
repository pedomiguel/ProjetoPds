from app.services.pipeline_step_service import PipelineStepService
from app.models import MediaFile, MediaType
from pathlib import Path
from app.extractor_app.inference import proc_folder
from typing import Optional

class BaseAudioStemStep(PipelineStepService):
    stem_name: Optional[str] = None  # To be set in subclasses
    model_type: Optional[str] = None  # To be set in subclasses
    config_path: Optional[str] = None  # To be set in subclasses
    start_check_point: Optional[str] = None  # To be set in subclasses

    def process(self, media_file: MediaFile) -> MediaFile:
        if not self.stem_name or not self.model_type or not self.config_path or not self.start_check_point:
            raise NotImplementedError("stem_name, model_type, config_path, and start_check_point must be set in subclass")
        input_folder = str(Path(media_file.data_path).parent)
        # Do not create a 'separated' folder; use input_folder as the output base
        output_folder = input_folder  # Let extractor create its own subfolders

        args = {
            "input_folder": input_folder,
            "store_dir": output_folder,
            "model_type": self.model_type,
            "config_path": self.config_path,
            "start_check_point": self.start_check_point,
        }
        proc_folder(args)

        # Find the output file generated by the extractor
        original_stem = Path(media_file.data_path).stem
        matches = list(Path(output_folder).rglob(f"{self.stem_name}.*"))
        for file in matches:
            # Rename to (original filename)_(extractiontype).(extension)
            new_name = f"{original_stem}_{self.stem_name}{file.suffix}"
            new_path = file.parent / new_name
            file.rename(new_path)
            return self._create_media_file(
                name=new_name,
                path=str(new_path),
                user_id=media_file.user_id,
                media_type=MediaType.AUDIO,
                parent_id=media_file.id,
            )
        raise Exception(f"Extraction failed or output not found for {self.stem_name}") 